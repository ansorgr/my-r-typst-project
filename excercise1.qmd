---
title: "Data types and structures"
author: "Ralf Ansorg"
date: "`r Sys.Date()`"
date-format: "DD MMMM YYYY"
format:
  typst:
    template-partials: 
      - typst-show.typ
      - typst-template.typ
echo: true
results: true
warning: false
---

# Exercise 1

Suppose you got the following data or data frame:

```{r}
#| label: init
a <- c(1:5) # mouse ID
b <- c(5, 6, 3, 10, 7) # licks per hours
c <- c("17.18", "16.03", "15.9", "17.99", "14") # length in cm
d <- c("Female", "Male", "Male", "Female", "Maile") # sex of mouse
e <- c(TRUE, FALSE, TRUE, TRUE, FALSE) # healthy mouse
```

```{r}
#| label: init-df
df <- data.frame(a=a, b=b, c=c, d=d, e=e)
```

## Question 1 {#sec-q1}
Which vectors (or columns of the data frame) need some work-over? If so, please write the correct code. _Hint_: try to figure this out by looking at its structure or class; recall coercion and accessing elements of vectors, and factors. Think about on how to assign new a value to a particular element of a vector, e.g. `my_example_vector[1]`.

### Solution
Vector `c` has quotation marks and looks suspicious (the code coloring above gives it already away). The length should be a decimal number. For convenience, we are using the vectors directly since we already have them. Otherwise, with the `data.frame`, it's `df$c` for accessing or manipulation. What about vector `d`? Isn't it a category (factor in R)?

Let's check the data type of `c` to be sure first.

#### Length vector {#sec-ex1-1a}

```{r}
#| label: ex1-1a
class(c)
c
```

As assumed, it is of type `character`. We need to transform the values to decimal numbers, `numeric` in R.

#### Length vector (2) {#sec-ex1-1b}

```{r}
#| label: ex1-1b
c <- as.numeric(c)
c
class(c)
```

Perfect! Our `length` vector is now of type `numeric`. We can now apply mathemical or statistical functions to it.

Vector `d` is rather a categorical variable with Female and Male as the only possible values. Since categories are factors in R, we coerce the vector using the `as.factor()` function. Note that this is, strictly speaking, *not* necessary in our example. However, in some cases, factors behave differently then characters or strings in computations (including statistical tests) and plotting.

#### Sex vector {#sec-ex1-1c}

```{r}
#| label: ex1-1c
d <- as.factor(d)
d
```

Wait, the levels indicate all available categories. There are three of them, obviously due to a spelling mistake. Let's correct it and run it again.

#### Sex vector (2) {#sec-ex1-1d}

```{r}
#| label: ex1-1d
d[5] <- "Male" # was misspelled as "Maile"
d <- as.factor(d)
d
```

The levels haven't changed although we corrected the spelling. What happened? Since `d` already had levels assigned when we coerced it to a factor, we also need to re-assign the levels[^0].

#### Sex vector (3) {#sec-ex1-1e}

```{r}
#| label: ex1-1e
d <- factor(d, levels = c("Female", "Male"))
d
```

It would have been easier to first correct the spelling (cleaning the data) and then make it a factor (i.e. just running (2)). Note that we _must_ use the `factor()` function to set the levels, it is not a parameter of the `as.factor()` function!

If you have an *ordered* factor, you can also change the order like this (there is, however, an entire package for it, `forcats`, which is part of the `tidyverse` package we will use later).

If you used the `str()` function for the data frame, you saw the incorrect data types at a glance, that is, c is of type `character` (chr â€” and also the quotation marks) and e of type `logical` (logi).

```{r}
#| label: ex1-str
str(df)
```

## Question 2 {#sec-q2}
Add all vectors to a new data frame `df_clean` with proper/meaningful headers (instead of `a` ... `e`).

### Solution
You can simply use column names you want to use and assign the vectors `a` ... `e`. Best practice is to avoid spaces. Use a single word or combine words with _ (underscore): `length_cm` or `licks_hr`. In this example, adding the unit(s) may even enhance the readability of your data (for humans).

If you get data with messy headers, the `janitor` package helps.

#### Clean data frame
```{r}
#| label: ex1-2
df_clean <- data.frame(ID=a, licks_hr=b, length_cm=c, sex=d, healthy=e)
df_clean
```

## Question 3 {#sec-q3}
What is the mean of the length of the mice? _Hint_: you could use the `mean()` function. What is the median?

### Solution
We can simply run the `mean()` and `median()` functions on the `length` column.

```{r}
#| label: ex1-3
mean(df_clean$length_cm)
median(df_clean$length_cm)
```

Inline computations are also possible if you want to insert values or the result of a function in your text:

> The mean length of the mice is `r mean(df_clean$length_cm)` and the median is `r median(df_clean$length_cm)`.[^1]

## Question 4 {#sec-q4}
Look at the structure **and** summary if your cleaned-up data is reasonable and briefly explain why (what you did). Bullet points only (use the \* or \- symbol), no essay.

### Solution
Review the structure and summary from Question 1 and compare it to our cleaned data frame (Question 2). If you want to check for data types, `str()` is probably the better and more compact choice. When we start working with the `tidyverse` package, there is an advanced data.frame (called a `tibble`) which prints the data types below the column names.

```{r}
#| label: ex1-4
str(df)
summary(df)

str(df_clean)
summary(df_clean)
```

### Comments/Bullet points

* Variable/vector `length` had to be converted to numerical (from character)
* Variable/vector `sex` is categorical, hence a factor (without any order)
* Factors and logicals are displayed differently: counts instead of the descriptive statistics [^2]

### Bonus

If you know that `FALSE` and `TRUE` are internally represented as `0` and `1`. What is the number of healthy mice (computed)?

Use the `sum()` function to count all `TRUE`s in column `healthly` which returns `r sum(df_clean$healthy)` (compare it to the `summary()` output above).

[^0]: Or remove variable d from the memory, which is rather complicated.
[^1]: Check the .qmd file on how to have inline code! The `>` is for empasis.
[^2]: Min, 25% Qrt, Median, Mean, 75% Qrt, Max